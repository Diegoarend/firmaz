type comment {
  username: String
  post_id: ID
  post: post @materializer(query: "getPostUsingComment_post_id_fkey")
  id: ID!
  created_at: DateTime
}

type post {
  vote: [vote] @materializer(query: "getVote")
  username: String
  title: String
  subtopic_id: ID
  subtopic: subtopic @materializer(query: "getSubtopic")
  id: ID!
  created_at: DateTime
  comment: [comment] @materializer(query: "getComment")
  body: String
}

type subtopic {
  topic: String
  post: [post] @materializer(query: "getPostUsingPost_subtopic_id_fkey")
  id: ID!
  created_at: DateTime
}

type vote {
  username: String
  upvote: Boolean
  post_id: ID
  post: post @materializer(query: "getPost")
  id: ID!
  created_at: DateTime
}

"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
  " Queries for type 'comment' "
  comment(id: ID!): comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  commentList: [comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  commentPaginatedList(first: Int, after: Int): [comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "username" FROM "comment" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  getComment(id: ID!): [comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "username" FROM "comment" WHERE "post_id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'post' "
  getPost(post_id: ID!): post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "subtopic_id", "title", "username" FROM "post" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  getPostUsingComment_post_id_fkey(post_id: ID!): post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "subtopic_id", "title", "username" FROM "post" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  getPostUsingPost_subtopic_id_fkey(id: ID!): [post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "subtopic_id", "title", "username" FROM "post" WHERE "subtopic_id" = $1
      """
      configuration: "postgresql_config"
    )
  post(id: ID!): post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  postList: [post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  postPaginatedList(first: Int, after: Int): [post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "subtopic_id", "title", "username" FROM "post" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'subtopic' "
  getSubtopic(subtopic_id: ID!): subtopic
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "topic" FROM "subtopic" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  subtopic(id: ID!): subtopic
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subtopic"
      configuration: "postgresql_config"
    )
  subtopicList: [subtopic]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subtopic"
      configuration: "postgresql_config"
    )
  subtopicPaginatedList(first: Int, after: Int): [subtopic]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "topic" FROM "subtopic" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'vote' "
  getVote(id: ID!): [vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "upvote", "username" FROM "vote" WHERE "post_id" = $1
      """
      configuration: "postgresql_config"
    )
  vote(id: ID!): vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
  voteList: [vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
  votePaginatedList(first: Int, after: Int): [vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "upvote", "username" FROM "vote" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
  " Mutations for type 'comment' "
  deleteComment(id: ID!): comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertComment(username: String, post_id: ID, created_at: DateTime): comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateComment(
    id: ID!
    created_at: DateTime
    post_id: ID
    username: String
  ): comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "comment" SET
        "created_at" = COALESCE($2, "created_at"),
        "post_id" = COALESCE($3, "post_id"),
        "username" = COALESCE($4, "username")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'post' "
  deletePost(id: ID!): post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertPost(
    username: String
    created_at: DateTime
    title: String
    subtopic_id: ID
    body: String
  ): post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updatePost(
    id: ID!
    body: String
    created_at: DateTime
    subtopic_id: ID
    title: String
    username: String
  ): post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "post" SET
        "body" = COALESCE($2, "body"),
        "created_at" = COALESCE($3, "created_at"),
        "subtopic_id" = COALESCE($4, "subtopic_id"),
        "title" = COALESCE($5, "title"),
        "username" = COALESCE($6, "username")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'subtopic' "
  deleteSubtopic(id: ID!): subtopic
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subtopic"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertSubtopic(topic: String, created_at: DateTime): subtopic
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subtopic"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateSubtopic(id: ID!, created_at: DateTime, topic: String): subtopic
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "subtopic" SET
        "created_at" = COALESCE($2, "created_at"),
        "topic" = COALESCE($3, "topic")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'vote' "
  deleteVote(id: ID!): vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertVote(
    username: String
    post_id: ID
    created_at: DateTime
    upvote: Boolean
  ): vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateVote(
    id: ID!
    created_at: DateTime
    post_id: ID
    upvote: Boolean
    username: String
  ): vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "vote" SET
        "created_at" = COALESCE($2, "created_at"),
        "post_id" = COALESCE($3, "post_id"),
        "upvote" = COALESCE($4, "upvote"),
        "username" = COALESCE($5, "username")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
}
